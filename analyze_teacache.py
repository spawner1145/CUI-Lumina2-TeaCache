import json
import argparse
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

def analyze_runs(data, max_lpips_thresh=None):
    """
    ÂØπÂä†ËΩΩÁöÑJSONÊï∞ÊçÆËøõË°åÂ§ÑÁêÜÂíåÂàÜÊûê„ÄÇ
    """
    if not data:
        print("ÈîôËØØÔºöJSONÊñá‰ª∂‰∏≠Ê≤°ÊúâÊï∞ÊçÆ„ÄÇ")
        return None, None

    # Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ
    df = pd.DataFrame(data)
    df = df.dropna(subset=['coefficients'])
    if df.empty:
        print("ÈîôËØØÔºöÊú™ÊâæÂà∞ÂåÖÂê´'coefficients'ÁöÑÊúâÊïàËøêË°åËÆ∞ÂΩï„ÄÇ")
        return None, None

    if max_lpips_thresh is not None and max_lpips_thresh > 0:
        if 'lpips_distance' in df.columns:
            print("\n" + "-"*15 + f" Â∫îÁî®Ë¥®ÈáèÈó®Êßõ (LPIPS <= {max_lpips_thresh}) " + "-"*15)
            original_count = len(df)
            df = df.dropna(subset=['lpips_distance'])
            df = df[df['lpips_distance'] <= max_lpips_thresh]
            filtered_count = len(df)
            print(f"Â∑≤‰ªé {original_count} Êù°ËÆ∞ÂΩï‰∏≠Á≠õÈÄâÂá∫ {filtered_count} Êù°Á¨¶ÂêàÊù°‰ª∂ÁöÑËÆ∞ÂΩï„ÄÇ")
            if df.empty:
                print("Ë≠¶ÂëäÔºöÂ∫îÁî®ÈòàÂÄºÂêéÔºåÊ≤°ÊúâÁ¨¶ÂêàÊù°‰ª∂ÁöÑËøêË°åËÆ∞ÂΩï„ÄÇ")
                return None, None
        else:
            print("Ë≠¶Âëä: Êï∞ÊçÆ‰∏≠‰∏çÂåÖÂê´ 'lpips_distance'ÔºåÊó†Ê≥ïÂ∫îÁî®Ë¥®ÈáèÈó®Êßõ„ÄÇ")
    
    df['hit_ratio'] = (df['cache_hits'] / df['total_inferences']).fillna(0)

    # ÂØªÊâæÂü∫ÂáÜÂíåËÆ°ÁÆóËäÇÁúÅÊó∂Èó¥ (‰ªÖÁî®‰∫é‚ÄúÈÄüÂ∫¶-ÂëΩ‰∏≠Áéá‚ÄùÂæóÂàÜ)
    baseline_runs = df[df['rel_l1_thresh'] == 0]
    if baseline_runs.empty:
        print("Ë≠¶ÂëäÔºöÊú™ÊâæÂà∞Âü∫ÂáÜËøêË°å (rel_l1_thresh == 0)ÔºåÊó†Ê≥ïËÆ°ÁÆó'ËäÇÁúÅÊó∂Èó¥'Áõ∏ÂÖ≥ÁöÑÂæóÂàÜ„ÄÇ")
        baseline_time = df['generation_time'].max()
    else:
        baseline_time = baseline_runs['generation_time'].min()
    
    print(f"Âü∫ÂáÜËøêË°åÊó∂Èó¥ (ÊúÄÂø´Êó†ÁºìÂ≠ò): {baseline_time:.2f} Áßí")
    
    df['time_saved'] = baseline_time - df['generation_time']
    df.loc[df['time_saved'] < 0, 'time_saved'] = 0

    if 'lpips_distance' in df.columns:
        # ÂëΩ‰∏≠Áéá / LPIPSË∑ùÁ¶ª
        df['score_lpips'] = (df['hit_ratio'] / df['lpips_distance'].replace(0, float('inf'))).fillna(0)
    else:
        print("Ë≠¶Âëä: Êï∞ÊçÆ‰∏≠‰∏çÂåÖÂê´ 'lpips_distance'ÔºåË∑≥ËøáLPIPSÁõ∏ÂÖ≥ÂàÜÊûê„ÄÇ")
        df['score_lpips'] = 0

    # ‚ÄúÈÄüÂ∫¶-ÂëΩ‰∏≠Áéá‚ÄùÁöÑÂæóÂàÜÂÖ¨Âºè‰øùÊåÅ‰∏çÂèò
    df['score_hit_ratio'] = df['time_saved'] * df['hit_ratio']

    # ÊâæÂá∫ÂêÑÈ°πÊúÄ‰Ω≥ÂèÇÊï∞
    results = {}
    cached_runs = df[df['rel_l1_thresh'] > 0]
    if cached_runs.empty:
        print("Ë≠¶Âëä: Êú™ÊâæÂà∞‰ªª‰ΩïÂºÄÂêØÁºìÂ≠òÁöÑËøêË°åËÆ∞ÂΩïÔºåÊó†Ê≥ïÊé®ËçêÊúÄ‰ºòÂèÇÊï∞„ÄÇ")
        return df, None

    best_indices = {
        "ÊúÄÂø´ÁîüÊàêÈÄüÂ∫¶": cached_runs['generation_time'].idxmin(),
        "ÊúÄÈ´òÁºìÂ≠òÂëΩ‰∏≠Áéá": cached_runs['hit_ratio'].idxmax(),
        "ÊúÄ‰Ω≥ÈÄüÂ∫¶-ÂëΩ‰∏≠ÁéáÁªºÂêàÊïàÁéá": cached_runs['score_hit_ratio'].idxmax(), # ÂêçÂ≠óÊõ¥Êñ∞
    }
    if df['score_lpips'].sum() > 0 and 'lpips_distance' in cached_runs.columns and cached_runs['lpips_distance'].notna().any():
        best_indices["ÊúÄ‰ΩéLPIPS (ÊúÄ‰Ω≥ÁîªË¥®)"] = cached_runs['lpips_distance'].idxmin()
        best_indices["ÊúÄ‰Ω≥Ë¥®Èáè-ÂëΩ‰∏≠ÁéáÁªºÂêàÊïàÁéá (LPIPS)"] = cached_runs['score_lpips'].idxmax() # ÂêçÂ≠óÊõ¥Êñ∞

    for name, idx in best_indices.items():
        best_run = df.loc[idx]
        results[name] = {
            "coefficients": best_run['coefficients'],
            "value": {
                "ÁîüÊàêÊó∂Èó¥": f"{best_run['generation_time']:.2f}s",
                "ÂëΩ‰∏≠Áéá": f"{best_run['hit_ratio']:.2%}",
                "LPIPS": f"{best_run.get('lpips_distance', 'N/A'):.4f}" if pd.notna(best_run.get('lpips_distance')) else "N/A",
                "ÈÄüÂ∫¶-ÂëΩ‰∏≠ÁéáÂæóÂàÜ": f"{best_run['score_hit_ratio']:.2f}",
                "Ë¥®Èáè-ÂëΩ‰∏≠ÁéáÂæóÂàÜ(LPIPS)": f"{best_run['score_lpips']:.4f}", # Â¢ûÂä†Â∞èÊï∞‰ΩçÁ≤æÂ∫¶
            }
        }
        
    return df, results

def print_results(results):
    if not results:
        return
        
    print("\n" + "="*25 + " ÂàÜÊûêÁªìÊûú " + "="*25)
    for name, data in results.items():
        print(f"\n--- {name} ---")
        print(f"  üèÜ ÊúÄ‰Ω≥Coefficients: {data['coefficients']}")
        print("     Áõ∏ÂÖ≥ÊåáÊ†á:")
        for key, val in data['value'].items():
            print(f"       - {key}: {val}")
    print("\n" + "="*62)


def create_plots(df, results, max_lpips_thresh=None):
    if df is None or results is None:
        print("Insufficient data to generate plots.")
        return

    plot_df = df[df['rel_l1_thresh'] > 0].copy()
    if plot_df.empty:
        print("No cache-enabled run data available, cannot generate plots.")
        return

    # Plot 1: Time vs LPIPS
    if 'score_lpips' in plot_df.columns and plot_df['lpips_distance'].notna().any():
        plt.style.use('seaborn-v0_8-darkgrid')
        fig1, ax1 = plt.subplots(figsize=(12, 8))

        scatter1 = ax1.scatter(plot_df['generation_time'], plot_df['lpips_distance'], 
                               c=plot_df['score_lpips'], cmap='viridis', alpha=0.7, s=50)
        fig1.colorbar(scatter1, label='Quality-Hit Ratio Score (Hit Ratio / LPIPS)')

        title = 'Generation Speed vs Image Quality (LPIPS)'
        if max_lpips_thresh:
            title += f'\n(Filtering applied, LPIPS <= {max_lpips_thresh})'
        ax1.set_title(title, fontsize=16)

        ax1.set_xlabel('Generation Time (seconds) - Lower is Better', fontsize=12)
        ax1.set_ylabel('LPIPS Distance - Lower is Better', fontsize=12)

        best_lpips_score_idx = plot_df['score_lpips'].idxmax()
        best_point = plot_df.loc[best_lpips_score_idx]
        ax1.scatter(best_point['generation_time'], best_point['lpips_distance'], 
                    color='red', s=150, edgecolor='black', marker='*', 
                    label='Best Quality-Hit Ratio Point')
        ax1.text(best_point['generation_time'], best_point['lpips_distance'], 
                 '  Best Combined Point', color='red', ha='left')
        ax1.legend()
        ax1.grid(True)

    # Plot 2: Time vs Cache Hit Ratio
    fig2, ax2 = plt.subplots(figsize=(12, 8))
    scatter2 = ax2.scatter(plot_df['generation_time'], plot_df['hit_ratio'], 
                           c=plot_df['score_hit_ratio'], cmap='plasma', alpha=0.7, s=50)
    fig2.colorbar(scatter2, label='Speed-Hit Ratio Score (Time Saved * Hit Ratio)')
    ax2.set_title('Generation Speed vs Cache Hit Rate', fontsize=16)
    ax2.set_xlabel('Generation Time (seconds) - Lower is Better', fontsize=12)
    ax2.set_ylabel('Cache Hit Rate - Higher is Better', fontsize=12)
    ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.0%}'.format(y)))

    best_hr_score_idx = plot_df['score_hit_ratio'].idxmax()
    best_point_hr = plot_df.loc[best_hr_score_idx]
    ax2.scatter(best_point_hr['generation_time'], best_point_hr['hit_ratio'], 
                color='blue', s=150, edgecolor='black', marker='*', 
                label='Best Speed-Hit Ratio Point')
    ax2.text(best_point_hr['generation_time'], best_point_hr['hit_ratio'], 
             '  Best Combined Point', color='blue', ha='left')
    ax2.legend()
    ax2.grid(True)

    print("\nGenerating visualization charts. Please check the pop-up windows. The program will end after you close the chart windows.")
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="ÂàÜÊûê TeaCache ÁöÑ JSON ËæìÂá∫Êñá‰ª∂ÔºåÂπ∂ÊâæÂá∫ÊúÄ‰ºòÂèÇÊï∞„ÄÇ")
    parser.add_argument("json_file", default="teacache_analysis.json", nargs='?', type=Path, help="ÊåáÂêë teacache_analysis.json Êñá‰ª∂ÁöÑË∑ØÂæÑ„ÄÇ")
    parser.add_argument(
        "--max_lpips", 
        type=float, 
        default=0.56, 
        help="ËÆæÁΩÆÂèØÊé•ÂèóÁöÑÊúÄÂ§ßLPIPSË∑ùÁ¶ªÈòàÂÄºÔºåÁî®‰∫éËøáÊª§‰ΩéË¥®ÈáèÊï∞ÊçÆ„ÄÇ‰æãÂ¶Ç: --max_lpips 0.6"
    )
    args = parser.parse_args()

    json_path = args.json_file
    if not json_path.is_file():
        print(f"ÈîôËØØ: Êñá‰ª∂‰∏çÂ≠òÂú® -> {json_path}")
    else:
        print(f"Ê≠£Âú®ËØªÂèñÊñá‰ª∂: {json_path}")
        with open(json_path, 'r', encoding='utf-8') as f:
            analysis_data = json.load(f)
        
        df, best_results = analyze_runs(analysis_data, args.max_lpips)
        print_results(best_results)
        create_plots(df, best_results, args.max_lpips)
